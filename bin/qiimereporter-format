#! /bin/bash

# Script to format Qiime 2 results previously generated by the user in order to produce the report

QIIMEREPORTERFORMAT=$0
while [ -h "$QIIMEREPORTERFORMAT" ]; do # resolve $QIIMEREPORTERFORMAT until the file is no longer a symlink
  QIIMEREPORTERFORMATDIR="$( cd -P "$( dirname "$0" )" && pwd )"
  QIIMEREPORTERFORMAT="$(readlink "$QIIMEREPORTERFORMAT")"
  [[ $QIIMEREPORTERFORMAT != /* ]] && QIIMEREPORTERFORMAT="$QIIMEREPORTERFORMATDIR/$QIIMEREPORTERFORMAT" # if $QIIMEREPORTERFORMAT is a symlink, resolve it relative to the path where the symlink file was located
done
QIIMEREPORTERFORMATDIR="$( cd -P "$( dirname "$QIIMEREPORTERFORMAT" )" && pwd )"

usage () {
cat << EOF

usage: $0 <options>

OBLIGATORY OPTIONS:
	-i/--input 	Path to the directory where the files are located
	-m/--metadata	Path to the Qiime2 metadata file

OTHER OPTIONS:
	-t/--threads	Number of threads to use if tree option is passed (default=$CPUS) <integer>
	--tree		Pass this option to create a tree

Please be sure that stats-dada2.qza, table.qza, taxonomy.qza, and tree.nwk are in the input directory before proceeding.

If you have not created the tree, please also copy the rep-seqs.qza file into the input directory and pass the option --tree 

EOF
}

if [ $# == 0 ]; then
	usage
	exit 1
fi

# VARIABLES

CPUS=1
INPUT=
INWD=
METADATA=
TAB="$(printf '\t')"
TREE=0

# VARIABLE OPTIONS

POSITIONAL=()
while [[ $# -gt 0 ]]
do
ARGS="$1"

case $ARGS in
	-i|--input)
	    if [ "$2" ]; then
                INPUT=$2
                shift 2
            else
                echo -e '\nERROR: "-i/--input" requires an argument\n'
                exit 1
            fi
            ;;
 	-m|--metadata)
	    if [ "$2" ]; then
                METADATA=$2
                shift 2
                if [ ! -e "$METADATA" ]
                    then echo -e "\nERROR: $METADATA doesn't exist! Please check \n"
                    exit 1
                fi
                if [ ! -s "$METADATA" ]
                    then echo -e "\nERROR: Size of $METADATA is 0! Please check \n"
                    exit 1
                fi
            else
                echo -e '\nERROR: "-m/--metadata" requires an argument\n'
                exit 1
            fi
            ;;
	--tree)
            TREE=1
            shift
            ;;
	-t|--threads) 
	    if [ "$2" -eq "$2"  ] 2>/dev/null ; then
                CPUS=$2
                shift 2
            else
                echo -e '\nERROR: "-t/--threads" requires a numeric argument'
                echo -e "argument parsed: $2 \n"
                exit 1
            fi
	    ;;
esac
done
set -- "${POSITIONAL[@]}" #restore positional parameters

INTEMP="$( cd -P "$( dirname "$INPUT" )" && pwd )"
INWD="$INTEMP/$INPUT"

# CHECK OBLIGATORY VARIABLES
if [ -z "$INPUT" ] || [ -z "$METADATA" ]; then
	echo ""
	if [ -z "$INPUT" ]; then
           echo 'ERROR: "-i/--input" option is needed!'
        fi
	if [ -z "$METADATA" ]; then
           echo 'ERROR: "-m/--metadata" option is needed!'
        fi
	echo ""
	exit 1
fi

# CHECK OBLIGATORY FILES
if [ ! -e "$INWD/stats-dada2.qza" ] || [ ! -e "$INWD/table.qza" ] || [ ! -e "$INWD/taxonomy.qza" ]; then
	echo ""
	if [ ! -e "$INWD/stats-dada2.qza" ]; then
           echo 'ERROR: "stats-dada2.qza" file not found!'
        fi
	if [ ! -e "$INWD/table.qza" ]; then
           echo 'ERROR: "table.qza" file not found!' 
	fi
	if [ ! -e "$INWD/taxonomy.qza" ]; then
           echo 'ERROR: "taxonomy.qza" file not found!'
        fi
	echo ""
	exit 1
fi

if [ "$TREE" == '0' ]; then
	if [ ! -e "$INWD/tree.nwk" ]; then
		if [ ! -e "$INWD/tree.nwk" ]; then
	  	      echo ""
       		      echo 'ERROR: "tree.nwk" file not found!'
	 	      echo ""
       		fi
		exit 1
	fi
fi

if [ "$TREE" == '1' ]; then
	if [ ! -e  "$INWD/rep-seqs.qza" ]; then
		if [ ! -e "$INWD/rep-seqs.qza" ]; then	   	
			echo ""
           		echo 'ERROR: "rep-seqs.qza" file not found!'
	   		echo ""
		fi
		exit 1
        fi
fi

# CHECK METADATA FORMAT

## Number of colums
head -n 1 $METADATA > temp1
read NCOL <<< $(awk -F "$TAB" '{print NF}' temp1 | sort -nu | tail -n 1)
if [ $NCOL -lt "4" ]; then
	echo -e "\nERROR: $METADATA format is incorrect (number of columns < 4), please check"
	echo -e "Type: '$0 example-metadata' for extra information\n"
	rm -f temp1
	exit 1
fi

read HEADER <<< $(head -n 1 $METADATA | cut -d "$TAB" -f 1)
if [ $HEADER != "#SampleID" ]; then
	echo -e "\nERROR: $METADATA format is incorrect (First column name should be '#SampleID'), please check"
        echo -e "Type: '$0 example-metadata' for extra information\n"
        exit 1
fi

read HEADER <<< $(head -n 1 $METADATA | cut -d "$TAB" -f 2)
if [ $HEADER != "BarcodeSequence" ]; then
        echo -e "\nERROR: $METADATA format is incorrect (Second column name should be 'BarcodeSequence'), please check"
        echo -e "Type: '$0 example-metadata' for extra information\n"
        exit 1
fi

read HEADER <<< $(head -n 1 $METADATA | cut -d "$TAB" -f 3)
if [ $HEADER != "LinkerPrimerSequence" ]; then
        echo -e "\nERROR: $METADATA format is incorrect (Third column name should be 'LinkerPrimerSequence'), please check"
        echo -e "Type: '$0 example-metadata' for extra information\n"
        exit 1
fi

## Check if sample names are unique

duplicate_check() {
	{ sort | uniq -d | grep . -qc; } < "$1"
}

tail -n +2 $METADATA > temp1
cut -f 1 -d "$TAB" temp1 > temp2
if duplicate_check temp2; then
	echo -e "\nERROR: there are some sample names that are equal! Please check\n"
	rm -f temp2
	exit 1
fi

rm -f temp1
rm -f temp2

## Exporting
qiime tools export --input-path $INWD/stats-dada2.qza --output-path $INWD/exported-feature-table
qiime tools export --input-path $INWD/table.qza --output-path $INWD/exported-feature-table
qiime tools export --input-path $INWD/taxonomy.qza --output-path $INWD/exported-feature-table
sed  's/Feature ID\tTaxon\tConfidence/#OTUID\ttaxonomy\tconfidence/g' $INWD/exported-feature-table/taxonomy.tsv > $INWD/exported-feature-table/biom-taxonomy.tsv
biom add-metadata -i $INWD/exported-feature-table/feature-table.biom -o $INWD/table-with-taxonomy.biom --observation-metadata-fp $INWD/exported-feature-table/biom-taxonomy.tsv --sc-separated taxonomy 

if [ "$TREE" == '1' ]; then

## Tree generation
echo -e "Tree generation started at: \c" 
date +"%Y-%m-%d %H:%M" 
qiime alignment mafft --i-sequences $INWD/rep-seqs.qza --o-alignment $INWD/aligned-rep-seqs.qza --p-n-threads $CPUS 
qiime alignment mask --i-alignment $INWD/aligned-rep-seqs.qza --o-masked-alignment $INWD/masked-aligned-rep-seqs.qza 
qiime phylogeny fasttree --i-alignment $INWD/masked-aligned-rep-seqs.qza --o-tree $INWD/unrooted-tree.qza --p-n-threads $CPUS 
qiime phylogeny midpoint-root --i-tree $INWD/unrooted-tree.qza --o-rooted-tree $INWD/rooted-tree.qza 
qiime tools export --input-path $INWD/rooted-tree.qza --output-path $INWD/exported-feature-table

fi

## Formatting files for report

# Creating sample information file with read stats
cut -f2,6 $INWD/exported-feature-table/stats.tsv > $INWD/stats-temp.tsv
cut -f2,3 --complement $METADATA > $INWD/metadata-temp.tsv
paste $INWD/metadata-temp.tsv $INWD/stats-temp.tsv > $INWD/sample-info.tsv
sed -i '2d;s/^#//' $INWD/sample-info.tsv
rm $INWD/stats-temp.tsv
rm $INWD/metadata-temp.tsv

### OTU tables
#### Extract all levels from qiime2 results
for i in 2 3 4 5 6 7; do
	qiime taxa collapse --i-table $INWD/table.qza --i-taxonomy $INWD/taxonomy.qza --p-level $i --o-collapsed-table $INWD/tablelevel-$i.qza
	qiime tools export --input-path $INWD/tablelevel-$i.qza --output-path $INWD/exported-feature-table-$i 
	biom convert -i $INWD/exported-feature-table-$i/feature-table.biom -o $INWD/otu_table_level-$i.txt --to-tsv
	rm -r $INWD/exported-feature-table-$i
	rm $INWD/tablelevel-$i.qza
done

#### Removes everything but final taxonomic level
cd $INWD
for i in $(ls $INWD/otu_table_level* | xargs -n 1 basename); do
	sed -i '1d;s/^#//' $INWD/$i
	sed -i 's/ /_/g' $INWD/$i 
	awk '{print $1}' $INWD/$i > $INWD/temp-$i
	sed -i 's/\;D_[0-7]__uncultured.*//g' $INWD/temp-$i
	sed -i 's/\;D_[0-7]__metagenome//g' $INWD/temp-$i
	sed -i 's@.*[0-7]__@@' $INWD/temp-$i 
	sed -i 's/\;__//g' $INWD/temp-$i
	paste $INWD/temp-$i $INWD/$i | sed -r 's/\S+//2' > $INWD/final-$i
	rm $INWD/temp-$i
done

## Create report_files folder
mkdir $INWD/report_files
mv $INWD/table-with-taxonomy.biom $INWD/report_files/table-with-taxonomy_nc.biom 
if [ "$TREE" == '0' ]; then
mv $INWD/tree.nwk $INWD/report_files/tree.nwk
fi
if [ "$TREE" == '1' ]; then
mv $INWD/exported-feature-table/tree.nwk $INWD/report_files/tree.nwk 
fi
mv $INWD/final-otu_table_* $INWD/report_files/
mv $INWD/sample-info.tsv $INWD/report_files/

## Converting biom file to json for phyloseq

biom convert -i $INWD/report_files/table-with-taxonomy_nc.biom -o $INWD/report_files/table-with-taxonomy.biom --table-type="OTU table" --to-json
rm $INWD/report_files/table-with-taxonomy_nc.biom

## Final details
mkdir $INWD/qiime2_artifacts
mv $INWD/*.qza $INWD/qiime2_artifacts/
rm -r $INWD/exported-feature-table
mkdir $INWD/complete_taxonomy_otutables
mv $INWD/otu_table_* $INWD/complete_taxonomy_otutables/

echo
echo "THANK YOU FOR FORMATTING YOUR RESULTS! NOW YOU CAN USE QIIMEREPORTER TO CREATE THE REPORT :)"
echo 
